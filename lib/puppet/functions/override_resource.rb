# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----

# ---- original file header ----
#
# @summary
#   
#
Puppet::Functions.create_function(:'override_resource') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    
  raise ArgumentError, ("override_resource(): wrong number of arguments (#{args.length}; must be 3)") if args.length > 3
  type, res_name, params = args
  Puppet.debug("override fun: #{type}[#{res_name}] (#{params.inspect})")

  source = self.source.clone
  source.meta_def(:child_of?) do |klass|
    true
  end
  res_params = params.collect { |name, value|
    par = Puppet::Parser::Resource::Param.new(
      :name   => name,
      :value  => value,
      :source => source
    )
  }

  Puppet.debug("override: #{type}[#{res_name}] - #{source.inspect}")
  res = Puppet::Parser::Resource.new(
    type, res_name,
    :parameters => res_params,
    :source => source,
    :scope => self
  )
  compiler.add_override(res)

  end
end

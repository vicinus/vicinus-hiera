# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
# realize_resources("tag == testit", "user", "exported")
# ---- original file header ----
#
# @summary
#   
#
Puppet::Functions.create_function(:'realize_resources') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    
  raise ArgumentError, ("realize_resources(): wrong number of arguments (#{args.length}; must be 3)") if args.length > 3

  querystr, typename, form = args

  case form
  when "exported"
    querystr = "#{typename.split("::").collect { |s| s.capitalize }.join("::")} <<| #{querystr} |>>"
  when "virtual"
    querystr = "#{typename.split("::").collect { |s| s.capitalize }.join("::")} <| #{querystr} |>"
  else
    raise Puppet::Error.new("Unknown Collection query form #{form}")
  end

  begin
    parser = Puppet::Parser::ParserFactory.parser(self.environment)
    parser.string = querystr
    res = parser.parse
  rescue => detail
    Puppet.warning("Parse error: #{detail}")
  end
  Puppet.debug("Parse result: #{res.inspect}")
  Puppet.debug("Parse result code: #{res.code.inspect}")
  Puppet.debug("Parse result code query: #{res.code[0].query.inspect}")
  query = res.code[0].query
  match, code = query && query.safeevaluate(self)

  newcoll = Puppet::Parser::Collector.new(self, typename, match, code, form.to_sym)

  compiler.add_collection(newcoll)

  end
end

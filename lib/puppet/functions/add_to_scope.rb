# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----

# ---- original file header ----
#
# @summary
#       Expects an hash as argument. Add each key value pair to the actual scope.
#
#    Primary used for hiera < v1.3, because hiera only with version 1.3 supports
#    references to hiera values, prior to v1.3 only references to variables in
#    the global puppet scope were possible. With this function, it is possible
#    to load values in the global scope, if called in the manifests/site.pp:
#
#    add_to_scope(hiera_hash('hiera::globalconfig', 
#      { puppettyp => 'agent', 'monitoring' => 'nrpe' }))
#
#
Puppet::Functions.create_function(:'add_to_scope') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    

    raise(Puppet::ParseError, "add_to_scope(): Wrong number of arguments "+
      "given (#{args.size} for 1)") if args.size != 1

    hash = args[0]
    raise(Puppet::ParseError, 
      'add_to_scope(): Requires hash as argument.') unless hash.is_a?(Hash)

    hash.each do | key, val |
      debug("adding to scope #{key}: #{val}")
      self.setvar(key, val)
    end
  
  end
end
